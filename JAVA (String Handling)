Ques. 1. How to declare a string in Java?

Ans> String declaration in Java can be done in two ways:
•	By string literal: Double quotes are used to create Java String literals. 
o	Example: String str= "Scaler";  
•	By new keyword: Keyword "new" is used to create a Java string.
o	Example: String str=new String ("Scaler");


Ques. 2. Is String a primitive or derived type in Java?

Ans> Strings are derived data types. Strings are Java objects that represent sequences of characters. String objects are created using the java.lang.String class. There are many functions that need to be called upon when processing a string, such as substring(), indexof(), equals(), toUppercase(), etc, which primitives types do not have.


Ques. 3. State the difference between String in C and String in Java.

Ans> •	String in C: In C, strings are just arrays of characters, and they are terminated with a /0, which is why we commonly refer to them as "null-terminated". Strings in C, like "abc$%", actually consist of 6 characters 'a' 'b' 'c' '$' '%' and '/0', but these can be easily manipulated.
•	String in Java: Java treats Strings as objects, not arrays. String objects are created using the java.lang.String class. String objects in Java are immutable; you cannot modify their contents. This means whenever we manipulate a String object, the new String is created rather than the original string being modified.


Ques. 4. Explain String pool in Java.

Ans> String Pool, also known as SCP (String Constant Pool), is a special storage space in Java heap memory that is used to store unique string objects. Whenever a string object is created, it first checks whether the String object with the same string value is already present in the String pool or not, and if it is available, then the reference to the string object from the string pool is returned.


Ques. 5. Is String immutable or final in Java? If so, then what are the benefits of Strings being Immutable?

Ans> Yes, Strings are immutable in Java. Immutable objects mean they can't be changed or altered once they've been created. However, we can only modify the reference to the string object. The String is immutable in Java because of many reasons like security, caching, synchronization and concurrency, and class loading.


Ques. 6. What does the string intern() method do in Java?

Ans> If you apply the intern() method to a few strings, you will ensure that all strings having the same content share the same memory. As soon as a String object is invoked with intern(), it first checks if the string value of the String object is already present in the string pool and if it is available, then the reference to that string from the string constant pool is returned. If not, a new string object is added to the string pool, and a reference to it is returned.


Ques. 7. State the difference between String and StringBuffer.

Ans> String objects in Java are immutable and final, so we can't change their value after they are created. Since strings are commonly used in applications, we need to perform several operations on them such as substring(), equals(), indexof(), toUppercase(), etc. Each time we manipulate a string, a new String object is created, and all previous objects will be garbage, placing a strain on the garbage collector. This is why The Java team developed StringBuffer. A StringBuffer is a mutable object, meaning it can be changed, but the string is an immutable object, so it cannot be changed once it has been created. 


Ques. 8. What is the difference between str1 == str2 and str1.equals(str2)?

Ans> Java offers both the equals() method and the "==" operator for comparing objects. However, here are some differences between the two:
•	Essentially, equals() is a method, while == is an operator.
•	The == operator can be used for comparing references (addresses) and the .equals() method can be used to compare content. To put it simply, == checks if the objects point to the same memory location, whereas .equals() compares the values of the objects.


Ques. 9. Is it possible to compare Strings using the == operator? If so, what is the risk involved?

Ans> Yes, you can compare strings using the == operator. One can use == operators for reference comparison (address comparison). The majority of the time, developers compare strings with the == operator, instead of using the equals() method, resulting in an error.


Ques. 10. What is the use of the substring() method in Java?

Ans> The substring method is used to return substring from a specified string. This method takes two parameters i.e., beginIndex (the starting index) and endIndex (the ending index). In the case of substring(), method startIndex is inclusive and endIndex is exclusive.
Syntax: 
substring(int beginIndex, int endIndex)
Or
substring(int beginIndex)
Here, 
•	beginIndex: Index that marks the starting of subsequence and it is inclusive.
•	endIndex: Index that marks the ending of subsequence and it is exclusive.

