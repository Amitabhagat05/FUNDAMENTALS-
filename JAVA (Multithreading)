Ques.1. What do you mean by Multithreading? Why is it important?

Ans> Multithreading means multiple threads and is considered one of the most important features of Java. As the name suggests, it is the ability of a CPU to execute multiple threads independently at the same time but share the process resources simultaneously. Its main purpose is to provide simultaneous execution of multiple threads to utilize the CPU time as much as possible. It is a Java feature where one can subdivide the specific program into two or more threads to make the execution of the program fast and easy.

Ques.2.  What are the benefits of using Multithreading?

Ans> There are various benefits of multithreading as given below:
* Allow the program to run continuously even if a part of it is blocked. 
* Improve performance as compared to traditional parallel programs that use multiple processes. 
* Allows to write effective programs that utilize maximum CPU time
* Improves the responsiveness of complex applications or programs. 
* Increase use of CPU resources and reduce costs of maintenance. 
* Saves time and parallelism tasks. 
* If an exception occurs in a single thread, it will not affect other threads as threads are independent. 
* Less resource-intensive than executing multiple processes at the same time.

Ques.3.  What is Thread in Java?

Ans> Threads are basically the lightweight and smallest unit of processing that can be managed independently by a scheduler. Threads are referred to as parts of a process that simply let a program execute efficiently with other parts or threads of the process at the same time. Using threads, one can perform complicated tasks in the easiest way. It is considered the simplest way to take advantage of multiple CPUs available in a machine. They share the common address space and are independent of each other.

Ques.4. What is Thread?

Ans> Thread: It simply refers to the smallest units of the particular process. It has the ability to execute different parts (referred to as thread) of the program at the same time. 

Ques.5. What is Process?

Ans> Process: It simply refers to a program that is in execution i.e., an active program. A process can be handled using PCB (Process Control Block). 

Ques.6. What is Clock lock?

Ans> Class Lock: In java, each and every class has a unique lock usually referred to as a class level lock. These locks are achieved using the keyword ‘static synchronized’ and can be used to make static data thread-safe. It is generally used when one wants to prevent multiple threads from entering a synchronized block. 

Ques.7. What is Object lock?

Ans> Object Lock: In java, each and every object has a unique lock usually referred to as an object-level lock. These locks are achieved using the keyword ‘synchronized’ and can be used to protect non-static data. It is generally used when one wants to synchronize a non-static method or block so that only the thread will be able to execute the code block on a given instance of the class.

Ques.8. What is User Thread?

Ans> User Thread (Non-Daemon Thread): In Java, user threads have a specific life cycle and its life is independent of any other thread. JVM (Java Virtual Machine) waits for any of the user threads to complete its tasks before terminating it. When user threads are finished, JVM terminates the whole program along with associated daemon threads. 

Ques.9. What is Daemon Thread?

Ans> Daemon Thread: In Java, daemon threads are basically referred to as a service provider that provides services and support to user threads. There are basically two methods available in thread class for daemon thread: setDaemon() and isDaemon(). 

Ques.10. How can we create daemon threads?

Ans> We can create daemon threads in java using the thread class setDaemon(true). It is used to mark the current thread as daemon thread or user thread. isDaemon() method is generally used to check whether the current thread is daemon or not. If the thread is a daemon, it will return true otherwise it returns false.  
